version: "3"
services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: async-course-zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    profiles: [all, pg_local, kafka]

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: async-course-kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    profiles: [all, pg_local, kafka]

  init-kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: async-course-init-kafka
    depends_on:
      - kafka1
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka1:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka1:29092 --create --if-not-exists --topic Account --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka1:29092 --create --if-not-exists --topic Task --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka1:29092 --list
      "
    profiles: [all, pg_local, kafka]

  db:
    image: postgres:alpine
    restart: always
    hostname: postgres
    container_name: async-course-postgres
    environment:
      POSTGRES_ROOT_PASSWORD: rootsecret
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - 54320:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 1s
      timeout: 5s
      retries: 10
    profiles: [all]

  auth:
    build:
      context: .
      dockerfile: auth/Dockerfile
    container_name: async-course-auth
    env_file:
      - ./auth/docker.env
    ports:
      - 4080:4080
    profiles: [all, pg_local, services]

  task:
    build:
      context: .
      dockerfile: task/Dockerfile
    container_name: async-course-task
    env_file:
      - ./task/docker.env
    ports:
      - 4081:4080
    profiles: [all, pg_local, services]

  accounting:
    build:
      context: .
      dockerfile: accounting/Dockerfile
    container_name: async-course-accounting
    env_file:
      - ./accounting/docker.env
    ports:
      - 4082:4080
    profiles: [all, pg_local, services]

  analytics:
    build:
      context: .
      dockerfile: analytics/Dockerfile
    container_name: async-course-analytics
    env_file:
      - ./analytics/docker.env
    ports:
      - 4083:4080
    profiles: [all, pg_local, services]
